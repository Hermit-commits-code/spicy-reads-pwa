rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // User-specific data (books, lists, etc.)
    match /users/{userId} {
      // Allow authenticated users to read only the email field of any user (for friend lookup)
      allow get: if request.auth != null;
      allow list: if false;
      allow update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      // Restrict field access
      function isEmailFieldOnly() {
        return (request.resource.data.keys().hasOnly(['email']) || resource.data.keys().hasOnly(['email']));
      }
      allow read: if request.auth != null && (request.auth.uid == userId || isEmailFieldOnly());

      match /books/{bookId} {
        allow read, write: if request.auth != null
          && (request.auth.uid == userId
              || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin == true);
      }
      match /lists/{listId} {
        allow read, write: if request.auth != null
          && (request.auth.uid == userId
              || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin == true);
      }
      match /listBooks/{listBookId} {
        allow read, write: if request.auth != null
          && (request.auth.uid == userId
              || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin == true);
      }
      match /backups/{backupId} {
        allow read, write: if request.auth != null
          && (request.auth.uid == userId
              || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin == true);
      }

      // Friend list (subcollection)
      match /friends/{friendId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // Friend requests (subcollection)
      match /friendRequests/{requestId} {
        allow create: if request.auth != null && request.auth.uid == request.resource.data.from;
        allow read, update, delete: if request.auth != null && (request.auth.uid == userId || request.auth.uid == resource.data.from);
      }

      // Notifications (subcollection)
      match /notifications/{notificationId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // Blocked users (subcollection)
      match /blocked/{blockedUserId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Private feed (posts only visible to user and friends)
    match /privateFeed/{userId}/posts/{postId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && (request.auth.uid == userId ||
        exists(/databases/$(database)/documents/users/$(userId)/friends/$(request.auth.uid)));
      allow update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Direct shares (books/posts shared directly to a user)
    match /directShares/{userId}/received/{shareId} {
      allow create: if request.auth != null && request.auth.uid == resource.data.from;
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
    }
  }
}
